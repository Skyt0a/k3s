docker run --privileged --name k3s-server-1 --net=k3s --hostname k3s-server-1 -p 6443:6443 -v //e/raspberry/kubernetes/data/node-1:/data -d rancher/k3s:latest server --disable=traefik --disable=servicelb
sleep 5
docker cp k3s-server-1:/etc/rancher/k3s/k3s.yaml ./kube-config
docker cp k3s-server-1:/var/lib/rancher/k3s/server/token ./token
export KUBECONFIG=kube-config

docker run -d --privileged --name k3s-server-2 --net=k3s --hostname k3s-server-2 -v //e/raspberry/kubernetes/data/node-2:/data -e K3S_TOKEN=$(cat token) -e K3S_URL=https://k3s-server-1:6443 rancher/k3s:latest agent

sleep 5
kubectl get nodes

kubectl create namespace argocd
./helm repo add argo https://argoproj.github.io/argo-helm
./helm install argo-cd argo/argo-cd --version 5.36.7
#kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

kubectl apply -n argocd -f ./init-argocd.yaml

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode


kubectl port-forward svc/argocd-server -n argocd 8080:443
kubectl port-forward svc/orchestrator-svc -n db 3000:3000
kubectl -n db exec -it mysql-1-7ddb9fddd7-qzgh8 -- bash

CREATE USER 'orc_client_user'@'%' IDENTIFIED BY 'orc_client_password';
GRANT SUPER, PROCESS, REPLICATION SLAVE, REPLICATION CLIENT, RELOAD ON *.* TO 'orc_client_user'@'%';
GRANT SELECT ON meta.* TO 'orc_client_user'@'%';
GRANT SELECT ON ndbinfo.processes TO 'orc_client_user'@'%'; -- Only for NDB Cluster
GRANT SELECT ON performance_schema.replication_group_members TO 'orc_client_user'@'%'; -- Only for Group Replication / InnoDB cluster
